image: sportsdirect/reaction
imageTag: e1e7127b34e9853130371a43e475b2ece505445f
#image: reactioncommerce/reaction
#imageTag: develop
imagePullPolicy: IfNotPresent
## How many replicas?
replicas: 1
## Should the service be LoadBalancer, NodePort or ClusterIP
## If you're using ingress, ClusterIP should be a solid choice
##
serviceType: NodePort
## Name value of an image pull secret
imagePullSecret: dockerhub-creds
## What port is reaction running on internally
## What port should reaction look like its running within the cluster
service:
    publicPort: 80
    apiPort: 3000
app:
    envVars:
    -   key: CART_REFERENCE_ID_PREFIX
        value: "44"
    -   key: DEFAULT_SHIPPING_METHOD_ID
        value: SPbMh5gdz24Wr4J94
    -   key: DEFAULT_SHIPPING_METHOD_RATE
        value: "2.99"
    -   key: ETCD_URL
        value: http://etcd-staging.bobs-test.io:2379
    -   key: GRAPHQL_INTROSPECTION_ENABLED
        value: "true"
    -   key: GRAPHQL_PLAYGROUND_ENABLED
        value: "true"
    -   key: HYDRA_ADMIN_URL
        value: http://hydra-hydra-admin-service:4445
    -   key: HYDRA_OAUTH2_INTROSPECT_URL
        value: http://hydra-hydra-admin-service:4445/oauth2/introspect
    -   key: INITIAL_IMPORT
        value: "true"
    -   key: INVENTORY_PLUGIN_BATCH_CONSUME_SIZE
        value: 1000
    -   key: JAEGER_ENDPOINT
        value: https://jaeger-collector.bobs-test.io/api/traces
    -   key: KAFKA_BOOTSTRAP_SERVERS
        value: kafka-cluster-cp-kafka.kafka:9092
    -   key: KAFKA_CLUSTER
        value: kafka-cluster-cp-kafka.kafka:9092
    -   key: KAFKA_PARTITION_ETL_SHIPPABLE_INVENTORY_STATUS
        value: 1
    -   key: KAFKA_PARTITIONS_LOYALTY
        value: 3
    -   key: KAFKA_TOPIC_CATALOG_IMPORT_ERRORS
        value: etl.product-import.errors.json-gen1
    -   key: KAFKA_TOPIC_CATALOG_SYNC_PRODUCTS
        value: etl.catalog-sync.products.json-gen1
    -   key: KAFKA_TOPIC_ETL_SHIPPABLE_INVENTORY_STATUS
        value: etl.shippable-inventory.inventory-status.json-gen1
    -   key: KAFKA_TOPIC_ETL_SHIPPABLE_INVENTORY_STREAM
        value: etl.shippable-inventory.inventory-data.json-gen1
    -   key: KAFKA_TOPIC_IMPORT_ORDER_STATUS_ORDERS
        value: etl.import-order-status.status.json-gen1
    -   key: KAFKA_TOPIC_IMPORT_TAX_CODES_TAXCODES
        value: etl.import-tax-codes.tax-codes.json-gen1
    -   key: KAFKA_TOPIC_LOYALTY_PLUGIN_DB_UPDATES_STATUS
        value: bobs.etl.loyalty-db-updates-status.json-gen1
    -   key: KAFKA_TOPIC_LOYALTY_PLUGIN_DB_UPDATES
        value: bobs.etl.loyalty-db-updates.json-gen1
    -   key: KAFKA_TOPIC_PRICEBOOKS
        value: reaction.pricing.pricebook-aggregates.avro-gen1
    -   key: KAFKA_TOPIC_PRICES_BY_ID
        value: reaction.pricing.prices-by-id-aggregates.avro-gen1
    -   key: KAFKA_TOPIC_PRODUCT_IMPORT_ERRORS_PARTITIONS
        value: "3"
    -   key: KAFKA_TOPIC_PRODUCT_IMPORT_ERRORS
        value: etl.product-import.errors.json-gen1
    -   key: KAFKA_TOPIC_PRODUCT_IMPORT_PRODUCTS_PARTITIONS
        value: "1"
    -   key: KAFKA_TOPIC_PRODUCT_IMPORT_PRODUCTS
        value: event.product-import.products.stream.json-gen1
    -   key: LOYALTY_CONSUMER_ENABLED
        value: true
    -   key: LOYALTY_PLUGIN_BATCH_CONSUME_SIZE
        value: "10000"
    -   key: MASTER_PUBLISH_CONSUMER_ENABLED
        value: true
    -   key: ORDER_EXPORT_RADIAL_URL
        value: https://tst02-epapi-na.gsipartners.com/v1.0/OOMF/stores
    -   key: PRICING_CONSUMER_ENABLED
        value: true
    -   key: PRICING_GRAPHQL_URL
        value: http://reaction-pricing-engine.bobs:8888/graphql
    -   key: PRODUCT_CONSUMER_ENABLED
        value: true
    -   key: PRODUCT_PUBLISHER_AUTO_PUBLISH
        value: false
    -   key: RADIAL_MODE
        value: sandbox
    -   key: RADIAL_STORE_ID
        value: BOBSUS
    -   key: RADIAL_TAXES_API_URL
        value: https://tst02-epapi-na.gsipartners.com/v1.0/stores
    -   key: REACTION_LOG_FORMAT
        value: "json"
    -   key: REACTION_LOG_LEVEL
        value: "info"
    -   key: REACTION_USER
        value: Reaction Admin
    -   key: ROOT_URL
        value: https://api.bobs-test.io
    -   key: SCHEMA_REGISTRY_URL
        value: http://kafka-cluster-cp-schema-registry.kafka:8081
    -   key: SERVER_TYPE
        value: WORKER
    -   key: SEO_METADATA_CONSUMER_ENABLED
        value: "true"
    -   key: SHIPPABLE_INVENTORY_CONSUMER_ENABLED
        value: "false"
    -   key: SITE_CODE
        value: BOBS
    -   key: SKIP_FIXTURES
        value: "1"
    -   key: STARTING_NEW_CUSTOMER_NUMBER
        value: "1100151420184"
    -   key: TAXES_CONSUMER_ENABLED
        value: "false"
    -   key: CONSTANT_PUBLISHER_MODE
        value: "true"
    -   key: CONSTANT_PUBLISHER_PAUSE_SECONDS
        value: 300
        ## Configure resource requests and limits
        ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
resources:
    requests:
        memory: 2Gi
        cpu: 1500m
    limits:
        memory: 2Gi
        cpu: "2"
scheduling:
    affinity:
        node:
            type: requiredDuringSchedulingIgnoredDuringExecution
            #      - key: iamalabelkey
            #        operator: In
            #        values: ["value1", "value2"]
            labels: null
    tolerations: null
networkPolicy:
    ingress: null
